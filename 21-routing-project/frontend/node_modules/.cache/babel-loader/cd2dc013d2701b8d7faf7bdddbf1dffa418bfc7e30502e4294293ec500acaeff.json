{"ast":null,"code":"var _jsxFileName = \"/Users/akaleshi/code/react-course/21-routing-project/frontend/src/pages/EventsPage.js\",\n  _s = $RefreshSig$();\nimport { Await, defer, useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events,\n    children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n      events: loadEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 23\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    //return { isError: true, message: \"Could not fetch events\" };\n    throw new Response(JSON.stringify({\n      message: \"Could not fetch events.\"\n    }), {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Await","defer","useLoaderData","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","children","loadedEvents","loadEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","response","fetch","ok","Response","JSON","stringify","message","status","loader","$RefreshReg$"],"sources":["/Users/akaleshi/code/react-course/21-routing-project/frontend/src/pages/EventsPage.js"],"sourcesContent":["import { Await, defer, useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\n\nfunction EventsPage() {\n  const {events} = useLoaderData();\n  return <Await resolve={events}>\n    {(loadedEvents)=> <EventsList events={loadEvents}/>}\n  </Await>\n}\n\nexport default EventsPage;\n\nexport async function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n\n  if (!response.ok) {\n    //return { isError: true, message: \"Could not fetch events\" };\n    throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n      status: 500,\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents(),\n  });\n}\n"],"mappings":";;AAAA,SAASA,KAAK,EAAEC,KAAK,EAAEC,aAAa,QAAQ,kBAAkB;AAC9D,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAACC;EAAM,CAAC,GAAGN,aAAa,CAAC,CAAC;EAChC,oBAAOG,OAAA,CAACL,KAAK;IAACS,OAAO,EAAED,MAAO;IAAAE,QAAA,EAC1BC,YAAY,iBAAIN,OAAA,CAACF,UAAU;MAACK,MAAM,EAAEI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AACV;AAACT,EAAA,CALQD,UAAU;EAAA,QACAJ,aAAa;AAAA;AAAAe,EAAA,GADvBX,UAAU;AAOnB,eAAeA,UAAU;AAEzB,OAAO,eAAeM,UAAUA,CAAA,EAAG;EACjC,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAA0B,CAAC,CAAC,EAAE;MACzEC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,OAAOP,QAAQ;EACjB;AACF;AACA,OAAO,SAASQ,MAAMA,CAAA,EAAG;EACvB,OAAOzB,KAAK,CAAC;IACXO,MAAM,EAAEI,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAAC,IAAAK,EAAA;AAAAU,YAAA,CAAAV,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}