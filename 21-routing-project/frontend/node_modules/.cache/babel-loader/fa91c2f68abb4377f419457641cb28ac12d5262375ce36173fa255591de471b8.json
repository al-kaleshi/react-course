{"ast":null,"code":"var _jsxFileName = \"/Users/akaleshi/code/react-course/21-routing-project/frontend/src/pages/EventDetailPage.js\",\n  _s = $RefreshSig$();\nimport { useRouteLoaderData } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventDetailPage() {\n  _s();\n  const data = useRouteLoaderData(\"event-detail\");\n  return /*#__PURE__*/_jsxDEV(EventItem, {\n    event: data.event\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n}\n_s(EventDetailPage, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nexport async function loader({\n  request,\n  params\n}) {\n  const response = await fetch(`http://localhost:8080/events/${params.eventId}`);\n  if (!response.ok) {\n    //return { isError: true, message: \"Could not fetch events\" };\n    throw new Response(JSON.stringify({\n      message: \"Could not fetch events\"\n    }), {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport async function action() {}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["useRouteLoaderData","EventItem","jsxDEV","_jsxDEV","EventDetailPage","_s","data","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","request","params","response","fetch","eventId","ok","Response","JSON","stringify","message","status","action","$RefreshReg$"],"sources":["/Users/akaleshi/code/react-course/21-routing-project/frontend/src/pages/EventDetailPage.js"],"sourcesContent":["import { useRouteLoaderData } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem.js\";\nfunction EventDetailPage() {\n  const data = useRouteLoaderData(\"event-detail\");\n  return <EventItem event={data.event} />;\n}\n\nexport default EventDetailPage;\n\nexport async function loader({ request, params }) {\n  const response = await fetch(\n    `http://localhost:8080/events/${params.eventId}`\n  );\n\n  if (!response.ok) {\n    //return { isError: true, message: \"Could not fetch events\" };\n    throw new Response(JSON.stringify({ message: \"Could not fetch events\" }), {\n      status: 500,\n    });\n  } else {\n    return response;\n  }\n}\n\nexport async function action() {\n  \n}\n"],"mappings":";;AAAA,SAASA,kBAAkB,QAAQ,kBAAkB;AACrD,OAAOC,SAAS,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACnD,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAMC,IAAI,GAAGN,kBAAkB,CAAC,cAAc,CAAC;EAC/C,oBAAOG,OAAA,CAACF,SAAS;IAACM,KAAK,EAAED,IAAI,CAACC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACzC;AAACN,EAAA,CAHQD,eAAe;EAAA,QACTJ,kBAAkB;AAAA;AAAAY,EAAA,GADxBR,eAAe;AAKxB,eAAeA,eAAe;AAE9B,OAAO,eAAeS,MAAMA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAChD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,gCAAgCF,MAAM,CAACG,OAAO,EAChD,CAAC;EAED,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;IAChB;IACA,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAAyB,CAAC,CAAC,EAAE;MACxEC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,OAAOR,QAAQ;EACjB;AACF;AAEA,OAAO,eAAeS,MAAMA,CAAA,EAAG,CAE/B;AAAC,IAAAb,EAAA;AAAAc,YAAA,CAAAd,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}